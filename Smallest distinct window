/*
Given a string 's'. The task is to find the smallest window length that contains all the characters of the given string at least one time.
For eg. A = “aabcbcdbca”, then the result would be 4 as of the smallest window will be “dbca”.

Example 1:

Input : "AABBBCBBAC"
Output : 3
Explanation : Sub-string -> "BAC"

Example 2:

Input : "aaab"
Output : 2
Explanation : Sub-string -> "ab"

Example 3:

Input : "GEEKSGEEKSFOR"
Output : 8
Explanation : Sub-string -> "GEEKSFOR"

Your Task:  
You don't need to read input or print anything. Your task is to complete the function findSubString() which takes the string  S as inputs and returns the length of the smallest such string.


Expected Time Complexity: O(256.N)
Expected Auxiliary Space: O(256)

Constraints:
1 ≤ |S| ≤ 105
String may contain both type of English Alphabets.
*/

#include <bits/stdc++.h>
using namespace std;
class Solution{
    public:
    string findSubString(string str)
    {
       std::unordered_map<char, int> m;
for (auto c : str) {
m.insert(pair<char, int>(c, 0));
}
int start = 0;
int end = 0;
int min_size = INT_MAX;
int count = 0;
while (end != str.size()) {
char c = str[end];
if (m[c] == 0) {
count++;
}
m[c] += 1;
if (count == m.size()) {
while ((m[str[start]] - 1) > 0) {
m[str[start]] -= 1;
start++;
}
if (min_size > (end - start + 1)) {
min_size = end - start + 1;
}
}
end++;
}
string subString = str.substr(start, min_size);
return subString;
}
};
int main() {
    int t;
    cin >> t;
    while (t--) {

        string str;
        cin >> str;
        Solution ob;
        cout << ob.findSubString(str).size() << endl;
    }
    return 0;
