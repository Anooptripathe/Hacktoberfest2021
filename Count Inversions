#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends


long long  merge(long long a[],long long l,long long m,long long h)
{
    long long n1=m-l+1,n2=h-m;
    long long left[n1],right[n2];
    for(long i=0;i<n1;i++)
    left[i]=a[l+i];
    for(long long i=0;i<n2;i++)
    right[i]=a[m+i+1];
    long long i=0,j=0,k=l,ans=0;
    while(i<n1 && j<n2)
    {
        if(left[i]<=right[j])
        {
            a[k++]=left[i++];
        }
        else
        {
            a[k++]=right[j++];
            ans+=(n1-i);
        }
    }
    while(i<n1){
    a[k++]=left[i++];
    }
    while(j<n2){
    a[k++]=right[j++];
    }
    
    return ans;
    
}




long long mergesort(long long a[],long long l,long long h)
{
    long long ans=0;
    if(l<h)
    {
        long long m=l+(h-l)/2;
        ans+=mergesort(a,l,m);
        ans+=mergesort(a,m+1,h);
        ans+=merge(a,l,m,h);
    }
    return ans;
}

long long inversionCount(long long a[], long long n)
{
    return mergesort(a,0,n-1);
}


// { Driver Code Starts.

int main() {
    
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        
        cout << inversionCount(A,N) << endl;
    }
    
    return 0;
}
  // } Driver Code Ends
